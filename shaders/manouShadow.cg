//Cg

void vshader(
            float4 vtx_position  : POSITION,
            float3 vtx_normal    : NORMAL,
            out float4 l_position : POSITION,
            out float4 l_color     : COLOR,
            out float4 l_shadowcoord : TEXCOORD1,
	        out float  l_smooth : TEXCOORD2,
	        out float4 l_lightclip : TEXCOORD3,
            uniform float4 k_push,
            uniform float4 k_scale,
            uniform float4x4 mat_modelproj,
            uniform float4x4 trans_model_to_world,
            uniform float4x4 trans_model_to_clip_of_shadowcam,
            uniform float3 k_globalambient,
            uniform float3 k_lightcolor,
            uniform float3 k_lightparams,
            uniform float4 wspos_light,
            uniform float4 wspos_light2,
            uniform float4 wspos_camera)

{

    float4 position = vtx_position * k_scale;

    l_position = mul(mat_modelproj, position); 

    float3 P;
    float3 N;

    P = mul(trans_model_to_world, vtx_position); 
    N = normalize(mul(float3x3(trans_model_to_world), vtx_normal)); 

    float3 L = normalize(wspos_light - wspos_light2);
    float diffuse_light = max(dot(N, L), 0) + k_globalambient ;

    float3 V = normalize(wspos_camera - P);
    float3 H = normalize(L + V);
    float specular_light = pow(max(dot(N, H), 0), 30) ;

    if (diffuse_light <= 0) specular_light = 0;

    l_color.xyz = diffuse_light * k_lightcolor + specular_light;
    l_color.w = 1;


    // Calculate light-space clip position.
float4 pushed = position + float4(vtx_normal * k_push, 0);
l_lightclip = mul(trans_model_to_clip_of_shadowcam, pushed);

    // Calculate shadow-map texture coordinates.
    l_shadowcoord = l_lightclip * float4(0.5,0.5,0.5,1.0) + l_lightclip.w * float4(0.5,0.5,0.5,0.0);
}

void fshader(
             uniform sampler2D k_shadowmap : TEXUNIT3,
             in float4 l_color : COLOR,
             in float2 l_texcoord0 : TEXCOORD0,
             in float4 l_shadowcoord : TEXCOORD1,
             in float  l_smooth : TEXCOORD2,
             in float4 l_lightclip : TEXCOORD3,
             out float4 o_color : COLOR0)
{
  float3 circleoffs;
  float falloff = 1;
  float4 baseColor;
  float shade = 1;
  float shade1 = 1;
  float4 proj = l_shadowcoord / l_shadowcoord.w;
  circleoffs = float3(l_lightclip.xy / l_lightclip.w, 0);
  falloff = saturate(1.0 - dot(circleoffs, circleoffs));

  shade = tex2Dproj(k_shadowmap,l_shadowcoord);

  shade1 = tex2D(k_shadowmap,l_shadowcoord.xy);



    o_color = l_color * (shade1 > proj.z) * falloff ;
    
}
